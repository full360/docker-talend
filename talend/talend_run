#!/bin/bash
export CONTEXT=$1

function run_hook {
	if [ -e "$1" ]
	then
		echo "running $1"
		$1
		echo "finshed $1"
	fi
}

function clean_up {
  echo "cleaning up after signal trap"
  touch ${TALENDROOTDIR}/block
  trap - TERM
  wait $PID

  # Run any initialization
  run_hook ${TALENDROOTDIR}/bin/finish_hook.sh
  rm -f ${TALENDJOBDIR}/block
}

# set TALENDCOMMAND after any pre-job hooks
export TALENDCOMMAND="${TALEND_EXECUTABLE} ${JAVA_ARGS} ${JAVA_CP} ${TALENDJOBCLASS}"
printf "project:      %s\n\
job:          %s\n\
prefix:       %s\n\
prefixlcase:  %s\n\
job version:  %s\n\
job _version: %s\n\
job dir     : %s\n\
context dir : %s\n\
job class   : %s\n\
jar name    : %s\n\
" $TALENDPROJECT $TALENDJOB $TALENDPREFIX $TALENDPREFIXLCASE $TALENDJOBVER \
  $TALENDJOBVERUNDERSCORE $TALENDJOBDIR $TALENDJOBCONTEXTSDIR $TALENDJOBCLASS \
  $TALENDJARNAME;\
echo "java args     : $JAVA_ARGS";\
echo "command       : $TALENDCOMMAND --context=$1 \"$@\""

# this traps a interrupt or termination so we can gracefully exit
trap 'clean_up' TERM INT

# Run any initialization
run_hook ${TALENDROOTDIR}/bin/init_hook.sh

# this runs for ever in the background until interruped, or the block semaphone
# is created
while true :
do
	# run the post job hook if it exists
	run_hook ${TALENDROOTDIR}/bin/pre_job_hook.sh

  # Run the talend job
	echo "Running Talend Job"
  $TALENDCOMMAND --context=$CONTEXT "$@"
  echo "Finished Talend Job"

  # run the post job hook if it exists
	run_hook ${TALENDROOTDIR}/bin/post_job_hook.sh

	if [ -e "${TALENDROOTDIR}/block" ]
	then
		echo "breaking due to presence of ${TALENDROOTDIR}/block"
		break
	fi
done &
# Wait for background loop to break or interrupted
PID=$!
wait $PID

EXIT_STATUS=$?
