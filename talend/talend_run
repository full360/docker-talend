#!/bin/bash
# set -x

export CONTEXT=$1
PID=0

# SIGUSR1-handler
my_handler() {
  echo "my_handler"
}

# SIGTERM-handler
term_handler() {
  if [ $PID -ne 0 ]; then
    kill -SIGTERM "$PID"
    wait "$PID"
  fi
  exit 143; # 128 + 15 -- SIGTERM
}

function run_hook {
	if [ -e "$1" ]
	then
		echo "running hook script $1"
		$1
		echo "finshed hook script $1"
	fi
}

function runit() {
	# this runs for ever until interruped, or the block semaphone is created
	run_hook ${TALENDROOTDIR}/bin/pre_job_hook.sh && \
	$TALENDCOMMAND --context=$CONTEXT "$@" && \
	run_hook ${TALENDROOTDIR}/bin/post_job_hook.sh
}

# setup handlers
# on callback, kill the last background process, which is `tail -f /dev/null` and execute the specified handler
trap 'kill ${!}; my_handler' SIGUSR1
trap 'kill ${!}; term_handler' SIGTERM

# set TALENDCOMMAND after any pre-job hooks
export TALENDCOMMAND="${TALEND_EXECUTABLE} ${JAVA_ARGS} ${JAVA_CP} ${TALENDJOBCLASS}"
printf "project:      %s\n\
job:          %s\n\
prefix:       %s\n\
prefixlcase:  %s\n\
job version:  %s\n\
job _version: %s\n\
job dir     : %s\n\
context dir : %s\n\
job class   : %s\n\
jar name    : %s\n\
" $TALENDPROJECT $TALENDJOB $TALENDPREFIX $TALENDPREFIXLCASE $TALENDJOBVER \
  $TALENDJOBVERUNDERSCORE $TALENDJOBDIR $TALENDJOBCONTEXTSDIR $TALENDJOBCLASS \
  $TALENDJARNAME;\
echo "java args     : $JAVA_ARGS";\
echo "command       : $TALENDCOMMAND --context=$1 \"$@\""

# Run init hook
run_hook ${TALENDROOTDIR}/bin/init_hook.sh

# run application
while true
do
	echo "starting talend run"
	runit 
	PID="$!"
	# wait ${!}
	echo "checking if there is a block"
	if [ -e "${TALENDROOTDIR}/block" ]
	then
		echo "breaking due to presence of ${TALENDROOTDIR}/block"
		exit
	fi
	echo "finished talend run"
done
echo "finished running"
rm -f ${TALENDJOBDIR}/block
EXIT_STATUS=$?
exit EXIT_STATUS
